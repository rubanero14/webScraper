*Steps of setting up web scraper project using Node JS*
- Open any IDE, create dedicated folder & open CMD using the folder's navbar
- in cmd, type 'npm init' and press enter until package.json has been created (once done, check if package.json file created in folder)
- create index.js file in the same folder
- in cmd, type 'npm i express' to install express js dependencies into the project (once done, check if dependencies created in package.json file)
- in cmd, type 'npm i cheerio' to install html web scraping tool into project (once done, check if dependencies created in package.json file)
- in cmd, type 'npm i axios' to install database tool (for CRUD function) into project (once done, check if dependencies created in package.json file)
- remove 'test' script in package.json with this line of code, ("start": "nodemon index.js") ignore the brackets
- in index.js, include this line of code, {const PORT = 8000} ignore the curly brackets
- in index.js, include this line of code, {const axios = require('axios')} ignore the curly brackets
- in index.js, include this line of code, {const cheerio = require('cheerio')} ignore the curly brackets
- in index.js, include this line of code, {const express = require('express')} ignore the curly brackets
- to release the express framework into project, in index.js, write this line of code, {const app = express()}
- in index.js, include this line of code listen to local server, {app.listen(PORT, () => console.log(`Server running on PORT ${PORT}`))} ignore the curly brackets
- in cmd, type 'npm run start' to initialize localserver, the word 'start' is based on the word declared in package.json
- in index.js, include this line of code to assign target website url to a variable, {const url = 'any url of target website'} ignore the curly brackets
- in index.js, include this line of code to read and display the target website, [axios(url).then =>{
const html = response.data; console.log(html)}] ignore the square bracket
- next click and type any characters in the CMD, the cmd screen should be able to load the HMTL properties of the target website, this is to confirm the program successful fetched data from the website
- in index.js, remove the console.log code in the previous step, and replace it with this code to pick up target html elements from the response data,
cheerio {const $ = cheerio.load(html); $('any target class elements within the target website')} ignore the curly bracket
- in index.js, include this line of code, {const articles = []} ignore curly bracket, to declare this empty array to push title & url into this article array
- in index.js, include this line of code, [$('.fc-item__title', html).each(function(){ //because we fetching target data with the specific class in html, add '.' as prefix to declare it as class, or "#"if its id
						const title = $(this).text() //this code fetches text value of the target class in html
						const url = $(this).find('a').attr('href') //this code fetches url from the a tag's href value of the target attribute in html
						articles.push({ //this function pushes the title & url data into article array
						title,
						url
						})
					}) 
					console.log(articles)
				}).catch(err => console.log(err))] ignore the square bracket
- save the index.js and view the cmd to check if the articles data/value been loaded on screen
- view the full line of code of index.js as below;
const PORT = 8000
const axios = require('axios')
const cheerio = require('cheerio')
const express = require('express')

const app = express()

const url = 'https://www.theguardian.com/uk'
[
axios(url)
	.then(response => {
		const html = response.data; //this code loads/renders html properties of target website
		const $ = cheerio.load(html) //this code returns specific html properties of target website
		const articles = [] // declare this empty array to push title & url into this article array

		$('.fc-item__title', html).each(function(){ //because we fetching target data with the specific class in html, add '.' as prefix to declare it as class, or "#"if its id 
			const title = $(this).text() //this code fetches text value of the target class in html
			const url = $(this).find('a').attr('href') //this code fetches url from the a tag's href value of the target attribute in html
			articles.push({ //this function pushes the title & url data into article array
				title,
				url
			})
		}) 
		console.log(articles)
	}).catch(err => console.log(err))

app.listen(PORT, () => console.log(`server running on PORT ${PORT}`))
] ignore the square bracket